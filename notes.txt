0 - Structure files and folders

- npx create-react-app .
- npm run
- delete all unneeded files in public and src folders;
- edit all left files: delete all unneeded entries;
- create sub-folders in src folder: css, components and fonts;
- move App.js to the components folder.


1 - Recipe List & Recipe

Recipe placeholder:
- header with title and two buttons;
- content in divs:
-- divs with two spans each (for property name and its value);
-- div with a span for property name and a div for property description;

App
Create an array of sample recipes (each sample has an id!).
Provide this array through props to Recipe List.

Recipe List
Receive props object and directly destructure recipe array.
Return a div with the result of iteration through the array of recipes with map (new array).
Each iteration take one object with recipe data in it and return one Recipe component with all recipe object properties spread as attribues (props).
Don't forget add an attribute with a name 'key' holding the value of a recipe id!

!!! Forgotten in video !!! Add "Add Recipe" button in a div container at the bottom of Recipe List.

Recipe
Receive props object, distructure it in bulk and replace placeholders with received values.


2 - Ingredient List & Ingredient

App
Add ingredients to the array of sample recipes: this property is an array of objects, each with id, name and amount for one ingredient.

Recipe
Ingredients value is received and distructured along with the other recipe data. Send as props to the Ingredient List, rendered in a div tag at the end of JSX.

Ingredient List
Receive and directly distructure the props object (ingredients).
This time show another way of creating elements for rendering - save a new array into a variable (ingredientElements) first, and then put this variable inside a div tag in JSX.
Other details are the same: map the array of ingredients, take one ingredient object at a time and spread inside returned Ingredient component. Don't forget to add the key argument equal to the ingredient id!

Ingredient
Receive and directly distructure the props object (ingredient), return a fragment with two spans - name and amount values for an ingredient.


3 - Styling recipes and ingredients

App
import '../css/app.css'

app.css
  @import-normalize;
  @import 'font.css';
  @import 'buttons.css;
  ...
- font-family Gotham Rounded and font size (25 pixels);
- remove margin and padding from the body;
- margin on right of 5 pixels;

font.css
- set fonts to Gotham Rounded;

RecipeList
Add classes (className) for recipe-list.css into JSX: 
- component container - "recipe-list";
- button container - "recipe-list__add-recipe-btn-container";
- button - "btn btn--primary";

recipe-list.css
- border shown on the right and height of the viewport;
- width for the section (half of the display width);
- button (center, padding on top and bottom or 30 pixels);

buttons.css
- inherit font size, set bold weight;
- no background, no border, no outline;
- padding of 5 and 20 pixels;
- border-radius of 5 pixels;
- pointer for cursor;
- light blue (hsl(200, 100%, 50%)) and white colors as primary;
- red (hsl(0, 100%, 50%)) and white colors as danger;
- saturation on hover 15% less than standard;

Recipe
Add classes (className) for recipe.css into JSX: 
- component container - "recipe";
- header - "recipe__header", "recipe__title", "btn btn--primary mr-1", "btn btn--danger";
- content lines - "recipe__row", "recipe__label", "recipe_value" + "recipe__value--indented" + "recipe__instructions";

recipe.css
- title - font size of 1.75 rem, no margin;
- header - flex with space-between and items aligned in the center, margin on bottom of 30 pixels;
- container - padding on bottom of 40 pixels and other directions of 20 pixels, border on the bottom;
- last recipe container - no border on the bottom, padding on the bottom of 10 pixels;
- content - margin on top of 10 pixels, name has margin on right of 5 pixels, font for the value is lighter (300);
- indented content - margins on the top and on the lefte of 10 and 20 pixels;
- instructions on new lines - preserve white spaces (white-space: pre-wrap;).

IngredientList
Add classes (className) for ingredient-list.css into JSX: 
- component container - "ingredient-grid";

ingredient-list.css
- container - display grid with 2 columns (repeat(2, auto)), row-gap of 5 pixels and column-gap of 40 pixels, justify-content - flex-start;


4 - Recipe Add and Delete Button Interactivity

App
- install the utility to generate unique id: npm i uuid
- import the utitlity: import { v4 as uuidv4 } from 'uuid'
- set the array of sample recipes as default state and directly destruct it to the state (recipes) and the method to set the state (setRecipes), don't forget to make corrections in the props accordingly;
- create two handler functions and provide in props object to RecipeList:
-- handleRecipeAdd that 1) establishes a dummy recipe object (newRecipe with unique id!), 2) sets a new state as an array with spread current state and this dummy object; 
-- handleRecipeDelete that that 1) filters current state by id (not equal to the deleted recipe's id), 2) sets a new state using filtered array.

RecipeList
- receive and deconstruct props object with recipes and handlers;
- provide handleRecipeDelete in props object to Recipe;
- add click event on "Add Recipe" button and use handleRecipeAdd handler;

Recipe
- receive and deconstruct handleRecipeDelete handler along with other properties in props object;
- add click event on "Delete" button and use handleRecipeDelete, providing id as an argument (put this call inside of an arrow function!);


5 - Recipe Add and Delete Button Context

App
- import React createContext method;
- create and export context for Recipe (RecipeContext);
- set an object with handler functions as a value to pass using context (recipeContextValue);
- add context provider and pass the value object (RecipeContext.Provider);
- make appropriate corrections (remove unneeded props);

RecipeList
- import React useContext hook and RecipeContext from App;
- distructure handleRecipeAdd to a variable from received context;
- make appropriate corrections (remove unneeded values from props disturcturing and props passing);

Recipe
- import React useContext hook and RecipeContext from App;
- distructure handleRecipeDelete to a variable from received context;
- make appropriate corrections (remove unneeded values from props disturcturing);


6 - UseEffect Hook and LocalStorage

App
- set the key for local storage (LOCAL_STORAGE_KEY) with a value 'cookingWithReact.recipes' above (!) the component function;

- save recipes:
-- import useEffect hook and set it to watch after recipes array - every time a recipe added or deleted, save the stringified array to local storage;

- load recipes (should be placed before save effect - sequence is important!):
-- set another useEffect hook to run only once when the app starts (second parameter is empty array), get recipes array from local storage in a variable (recipeJSON), check if the value is not equal to null and re-set the state with parsed array;


7 - RecipeEdit

Styling RecipeEdit

Selected Recipe State and Recipe Edit Values

Recipe Edit Input Interactivity

Last touches
